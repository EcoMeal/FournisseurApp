<?php

namespace AppBundle\Repository;

/**
 * BasketOrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BasketOrderRepository extends \Doctrine\ORM\EntityRepository {

    /**
     * Returns the orders between two dates
     * @param dateTime $start
     * @param dateTime $end
     * @return Array<Basket>
     */
    public function getOrdersBetween($start, $end) {
        $qb = $this->createQueryBuilder('o')
                ->where('o.deliveryTime BETWEEN :start AND :end');
        $qb->setParameter(':start', $start);
        $qb->setParameter(':end', $end);
        return $qb->getQuery()->getArrayResult();
    }

    /**
     * Returns all the Orders with the content of the baskets and the product of these baskets
     * @return Array<BasketOrder>
     */
    public function getAllOrdersWithBasketListOrderedByTime() {
        $qb = $this->createQueryBuilder('b')
                ->leftJoin('b.basketOrderContent ', "basketOrderContent")
                ->addSelect('basketOrderContent')
                ->leftJoin('basketOrderContent.basket', 'basket')
                ->addSelect('basket')
                ->leftJoin('basket.product_list ', "product")
                ->addSelect('product')
                ->orderBy('b.deliveryTime');
        return $qb->getQuery()->getArrayResult();
    }

    /**
     * Returns the order and its content corresponding to the $id
     * @param integer $id
     * @return BasketOrder
     */
    public function getOrderWithBasketList($id) {
        $qb = $this->createQueryBuilder('b')
                ->leftJoin('b.basketOrderContent ', "basketOrderContent")
                ->addSelect('basketOrderContent')
                ->leftJoin('basketOrderContent.basket', 'basket')
                ->addSelect('basket')
                ->leftJoin('basket.product_list ', "product")
                ->addSelect('product')
                ->where('b.id = :id');
        $qb->setParameter(':id', $id);
        return $qb->getQuery()->getArrayResult();
    }
    
    public function getAllOrdersWithBasketId($basket_id) {
    	$qb = $this->createQueryBuilder('b')
    	->leftJoin('b.basketOrderContent ', "basketOrderContent")
    	->addSelect('basketOrderContent')
    	->leftJoin('basketOrderContent.basket', 'basket')
    	->addSelect('basket')
    	->where('basket.id = :basket_id');
    	$qb->setParameter(":basket_id", $basket_id);
    	return $qb->getQuery()->getArrayResult();
    }

}
